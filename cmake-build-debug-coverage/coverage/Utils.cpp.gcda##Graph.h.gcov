        -:    0:Source:F:/develop/src/core/Graph.h
        -:    0:Graph:F:\develop\cmake-build-debug-coverage\CMakeFiles\coretest.dir\src\core\Utils.cpp.gcno
        -:    0:Data:F:\develop\cmake-build-debug-coverage\CMakeFiles\coretest.dir\src\core\Utils.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by cychen on 2023/3/7.
        -:    3://
        -:    4:
        -:    5:#ifndef WORKLIST_GRAPH_H
        -:    6:#define WORKLIST_GRAPH_H
        -:    7:
        -:    8:#include <iostream>
        -:    9:#include "Word.h"
        -:   10:#include <string.h>
        -:   11:#include "Const.h"
        -:   12:#include <vector>
        -:   13:
        -:   14:using namespace std;
        -:   15:
        -:   16:class Graph {
        -:   17:private:
        -:   18:    vector<Word> edges;//存贮边的信息
        -:   19:    vector<int> adj[MAXN_POINT];//邻接列表
        -:   20:    int edgeCnt;//边数，也可以作为编号
        -:   21:    int pointSelfLoopCnt[MAXN_POINT];//每个点的自环数
        -:   22:    int pointSelfLoopCharNum[MAXN_POINT];//每个点自环上的总字母数
        -:   23:    int indegree[MAXN_POINT];
        -:   24:
        -:   25:public:
        -:   26:    explicit Graph(vector<Word> &edges, bool banReject = false);
        -:   27:
function _ZNK5Graph8getEdgesEv called 12984 returned 100% blocks executed 100%
    12984:   28:    const vector<Word> &getEdges() const {
    12984:   29:        return edges;
    12984:   29-block  0
        -:   30:    }
        -:   31:
function _ZNK5Graph6getAdjEv called 23855 returned 100% blocks executed 100%
    23855:   32:    const vector<int> *getAdj() const {
    23855:   33:        return adj;
    23855:   33-block  0
        -:   34:    }
        -:   35:
function _ZNK5Graph10getEdgeCntEv called 572 returned 100% blocks executed 100%
      572:   36:    int getEdgeCnt() const {
      572:   37:        return edgeCnt;
      572:   37-block  0
        -:   38:    }
        -:   39:
function _ZNK5Graph19getPointSelfLoopCntEi called 3 returned 100% blocks executed 100%
        3:   40:    int getPointSelfLoopCnt(int point) const {
        3:   41:        return pointSelfLoopCnt[point];
        3:   41-block  0
        -:   42:    }
        -:   43:
        -:   44:    Graph();
        -:   45:
        -:   46:
function _ZNK5Graph11getIndegreeEv called 57 returned 100% blocks executed 100%
       57:   47:    const int *getIndegree() const {
       57:   48:        return indegree;
       57:   48-block  0
        -:   49:    }
        -:   50:
        -:   51:    void subIndgree(int point);
        -:   52:
function _ZNK5Graph11getEdgeFromEi called 3 returned 100% blocks executed 100%
        3:   53:    vector<int> getEdgeFrom(int from) const {
        3:   54:        return adj[from];
        3:   54-block  0
call    0 returned 3
        -:   55:    }
        -:   56:
function _ZN5Graph18getSelfEdgeCharSumEi called 0 returned 0% blocks executed 0%
    #####:   57:    int getSelfEdgeCharSum(int point) {
    #####:   58:        return pointSelfLoopCharNum[point];
    %%%%%:   58-block  0
        -:   59:    }
        -:   60:
        -:   61:    vector<string> getSelfEdgeChain(int point) {
        -:   62:        vector<string> result;
        -:   63:        for (auto &edgeid: adj[point]) {
        -:   64:            Word w = edges[edgeid];
        -:   65:            if (w.getAnEnd() == point) {
        -:   66:                result.push_back(w.getStr());
        -:   67:            }
        -:   68:        }
        -:   69:        return result;
        -:   70:    }
        -:   71:
        -:   72:    Word getEdgeBetween(int start,int end,bool maxChar = false){
        -:   73:        int maxnum = 0;
        -:   74:        Word result;
        -:   75:        if(maxChar){
        -:   76:            Word rec;
        -:   77:            for(auto &edgeid:adj[start]){
        -:   78:                Word w = edges[edgeid];
        -:   79:                if(w.getAnEnd() == end){
        -:   80:                  if(w.getLength() > maxnum){
        -:   81:                     rec = w;
        -:   82:                     maxnum = w.getLength();
        -:   83:                  }
        -:   84:                }
        -:   85:            }
        -:   86:            return rec;
        -:   87:        } else{
        -:   88:            for(auto &edgeid:adj[start]){
        -:   89:                Word w = edges[edgeid];
        -:   90:                if(w.getAnEnd() == end){
        -:   91:                    return w;
        -:   92:                }
        -:   93:            }
        -:   94:        }
        -:   95:        return result;
        -:   96:    }
        -:   97:
        -:   98:    int addEdge(Word& word, bool banRejectLimit);
        -:   99:};
        -:  100:
        -:  101:
        -:  102:#endif //WORKLIST_GRAPH_H
