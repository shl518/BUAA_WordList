        -:    0:Source:F:/develop/src/core/Graph.h
        -:    0:Graph:F:\develop\cmake-build-debug-coverage\CMakeFiles\coretest.dir\src\core\Controller.cpp.gcno
        -:    0:Data:F:\develop\cmake-build-debug-coverage\CMakeFiles\coretest.dir\src\core\Controller.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by cychen on 2023/3/7.
        -:    3://
        -:    4:
        -:    5:#ifndef WORKLIST_GRAPH_H
        -:    6:#define WORKLIST_GRAPH_H
        -:    7:
        -:    8:#include <iostream>
        -:    9:#include "Word.h"
        -:   10:#include <string.h>
        -:   11:#include "Const.h"
        -:   12:#include <vector>
        -:   13:
        -:   14:using namespace std;
        -:   15:
        -:   16:class Graph {
        -:   17:private:
        -:   18:    vector<Word> edges;//存贮边的信息
        -:   19:    vector<int> adj[MAXN_POINT];//邻接列表
        -:   20:    int edgeCnt;//边数，也可以作为编号
        -:   21:    int pointSelfLoopCnt[MAXN_POINT];//每个点的自环数
        -:   22:    int pointSelfLoopCharNum[MAXN_POINT];//每个点自环上的总字母数
        -:   23:    int indegree[MAXN_POINT];
        -:   24:
        -:   25:public:
        -:   26:    explicit Graph(vector<Word> &edges, bool banReject = false);
        -:   27:
        -:   28:    const vector<Word> &getEdges() const {
        -:   29:        return edges;
        -:   30:    }
        -:   31:
        -:   32:    const vector<int> *getAdj() const {
        -:   33:        return adj;
        -:   34:    }
        -:   35:
function _ZNK5Graph10getEdgeCntEv called 0 returned 0% blocks executed 0%
    #####:   36:    int getEdgeCnt() const {
    #####:   37:        return edgeCnt;
    %%%%%:   37-block  0
        -:   38:    }
        -:   39:
        -:   40:    int getPointSelfLoopCnt(int point) const {
        -:   41:        return pointSelfLoopCnt[point];
        -:   42:    }
        -:   43:
        -:   44:    Graph();
        -:   45:
        -:   46:
        -:   47:    const int *getIndegree() const {
        -:   48:        return indegree;
        -:   49:    }
        -:   50:
        -:   51:    void subIndgree(int point);
        -:   52:
        -:   53:    vector<int> getEdgeFrom(int from) const {
        -:   54:        return adj[from];
        -:   55:    }
        -:   56:
        -:   57:    int getSelfEdgeCharSum(int point) {
        -:   58:        return pointSelfLoopCharNum[point];
        -:   59:    }
        -:   60:
function _ZN5Graph16getSelfEdgeChainB5cxx11Ei called 3 returned 100% blocks executed 77%
        3:   61:    vector<string> getSelfEdgeChain(int point) {
        3:   62:        vector<string> result;
        3:   62-block  0
call    0 returned 3
        6:   63:        for (auto &edgeid: adj[point]) {
call    0 returned 3
call    1 returned 3
        3:   63-block  0
call    2 returned 3
call    3 returned 3
        6:   63-block  1
call    4 returned 6
branch  5 taken 3
branch  6 taken 3 (fallthrough)
        3:   64:            Word w = edges[edgeid];
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   65:            if (w.getAnEnd() == point) {
        3:   65-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   65-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:   66:                result.push_back(w.getStr());
        1:   66-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   66-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:   67:            }
        3:   68:        }
        3:   68-block  0
call    0 returned 3
    $$$$$:   68-block  1
call    1 never executed
        3:   69:        return result;
        3:   69-block  0
        3:   69-block  1
    =====:   70:    }
    $$$$$:   70-block  0
call    0 never executed
        -:   71:
function _ZN5Graph14getEdgeBetweenEiib called 2 returned 100% blocks executed 40%
        2:   72:    Word getEdgeBetween(int start,int end,bool maxChar = false){
        2:   73:        int maxnum = 0;
        2:   74:        Word result;
        2:   74-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   75:        if(maxChar){
        2:   75-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:   76:            Word rec;
    %%%%%:   76-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   77:            for(auto &edgeid:adj[start]){
    %%%%%:   77-block  0
call    0 never executed
call    1 never executed
    %%%%%:   77-block  1
call    2 never executed
call    3 never executed
    %%%%%:   77-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   78:                Word w = edges[edgeid];
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   79:                if(w.getAnEnd() == end){
    %%%%%:   79-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   79-block  1
branch  3 never executed
branch  4 never executed
    #####:   80:                  if(w.getLength() > maxnum){
    %%%%%:   80-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   80-block  1
branch  3 never executed
branch  4 never executed
    #####:   81:                     rec = w;
    %%%%%:   81-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:                     maxnum = w.getLength();
    %%%%%:   82-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   82-block  1
        -:   83:                  }
        -:   84:                }
    #####:   85:            }
    %%%%%:   85-block  0
call    0 never executed
    $$$$$:   85-block  1
call    1 never executed
    #####:   86:            return rec;
    %%%%%:   86-block  0
call    0 never executed
    #####:   87:        } else{
call    0 never executed
    $$$$$:   87-block  0
call    1 never executed
        3:   88:            for(auto &edgeid:adj[start]){
        2:   88-block  0
call    0 returned 2
call    1 returned 2
        3:   88-block  1
call    2 returned 3
        1:   88-block  2
call    3 returned 1
        3:   88-block  3
call    4 returned 3
branch  5 taken 3
branch  6 taken 0 (fallthrough)
        3:   89:                Word w = edges[edgeid];
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   90:                if(w.getAnEnd() == end){
        3:   90-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   90-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   91:                    return w;
        2:   91-block  0
call    0 returned 2
        -:   92:                }
        3:   93:            }
        1:   93-block  0
        3:   93-block  1
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
    $$$$$:   93-block  2
call    3 never executed
        -:   94:        }
    #####:   95:        return result;
    %%%%%:   95-block  0
call    0 never executed
        2:   96:    }
        2:   96-block  0
call    0 returned 2
    $$$$$:   96-block  1
call    1 never executed
        -:   97:
        -:   98:    int addEdge(Word& word, bool banRejectLimit);
        -:   99:};
        -:  100:
        -:  101:
        -:  102:#endif //WORKLIST_GRAPH_H
